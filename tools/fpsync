#!/bin/sh

# Copyright (c) 2014 Ganael LAPLANCHE <ganael.laplanche@martymac.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# This script is a simple wrapper showing how fpart can be used to migrate data.
# It uses fpart and rsync to spawn multiple rsync instances to migrate data
# from src_dir/ to dst_dir/. Rsync jobs can execute either locally or over SSH.
# This migration is incremental and will need a final rsync pass
# (rsync -av -delete src_dir/ dst_dir/) to remove extra files from dst_dir/.
# See the Configuration section below to set-up the script.

########## Default values for options

# Number of rsync jobs to run in parallel ("workers")
OPT_JOBS=2
# Same, but autodetected (on FreeBSD)
#OPT_JOBS=$(($(sysctl -n hw.ncpu) - 1))
# Maximum files per worker
OPT_FPMAXPARTFILES="2000"
# Maximum bytes to transfer per worker
OPT_FPMAXPARTSIZE="$((4 * 1024 * 1024 * 1024))" # 4 GB
# SSH workers (execute jobs locally if not defined)
OPT_WRKRS=""
# FPart Shared dir (must be shared amongst all workers)
OPT_FPSHDIR="/mnt/nfs/fpart"
# Verbose mode
OPT_VERBOSE=""
# Source directory
OPT_SDIR=""
# Destination directory
OPT_DDIR=""

# Mail - Uncomment to receive a mail when the whole rsync job has finished.
# The master machine (the one running this script) must be able to send mail
# using the 'mail' command. No CLI option is provided to change it.
#OPT_MAIL="address@mydomain.tld"

# Local fpart dir (for queue management).
# No CLI option is provided to change it.
OPT_FPDIR="/tmp/fpart"

########## Various functions

# Print help
usage () {
    echo "fpsync - Start multiple rsync in parallel using fpart"
    echo "Copyright (c) 2014 Ganael LAPLANCHE <ganael.laplanche@martymac.org>"
    echo "WWW: http://contribs.martymac.org"
    echo "Usage: $0 [OPTIONS...] /src_dir/ /dst_dir/"
    echo "  -n <x>:    start <x> concurrent rsync workers"
    echo "  -f <y>:    transfer at most <y> files per worker"
    echo "  -s <z>:    transfer at most <z> bytes per worker"
    echo "  -w wrks:   space-separated list of SSH workers"
    echo "             e.g.: -w 'login@host1 login@host2 login@host3'"
    echo "             or:   -w 'login@host1' -w 'login@host2' -w 'login@host3'"
    echo "             Jobs are executed locally if not specified (default)."
    echo "  -d /dir/:  set shared dir to dir (absolute path)"
    echo "  -v:        verbose mode"
    echo "  -h:        this help"
    echo "  /src_dir/: source directory (absolute path)"
    echo "  /dst_dir/: destination directory (absolute path)"
}

# Print a message to stderr and exit with error code 1
end_die () {
    [ -n "$1" ] && echo -e "$1" 1>&2
    exit 1
}

# Print (to stdout) and log a message
echo_log () {
    [ -n "$1" ] && [ -n "${OPT_VERBOSE}" ] && echo "$1"
    echo "$1" >> "${FPART_LOGFILE}"
}

# Check if $1 is an absolute path
is_abs_path() {
    echo "$1" | grep -qE "^/"
}

# Check if $1 is a number
is_num () {
    echo "$1" | grep -qE '^[0-9]+$'
}

# Parse user options and initialize OPT_* global variables
parse_opts () {
    local opt OPTARG OPTIND

    while getopts "n:f:s:w:d:vh" opt
    do
        case "${opt}" in
        "n")
            if is_num "${OPTARG}" && [ ${OPTARG} -ge 1 ]
            then
                OPT_JOBS=${OPTARG}
            else
                end_die "Option -n expects a numeric value >= 1"
            fi
            ;;
        "f")
            if is_num "${OPTARG}" && [ ${OPTARG} -gt 0 ]
            then
                OPT_FPMAXPARTFILES=${OPTARG}
            else
                end_die "Option -f expects a numeric value > 0"
            fi
            ;;
        "s")
            if is_num "${OPTARG}" && [ ${OPTARG} -gt 0 ]
            then
                OPT_FPMAXPARTSIZE=${OPTARG}
            else
                end_die "Option -s expects a numeric value > 0"
            fi
            ;;
        "w")
            if [ -n "${OPTARG}" ]
            then
                OPT_WRKRS="${OPT_WRKRS} ${OPTARG}"
            else
                end_die "Invalid workers list supplied"
            fi
            ;;
        "d")
            if is_abs_path "${OPTARG}"
            then
                OPT_FPSHDIR="${OPTARG}"
            else
                end_die "Please supply an absolute path for shared dir"
            fi
            ;;
        "v")
            OPT_VERBOSE="yes"
            ;;
        "h")
            usage
            exit 0
            ;;
        *)
            usage
            end_die "Invalid option specified"
            ;;
        esac
    done
    shift $((${OPTIND} - 1))

    # Check for options validity
    [ -n "${OPT_WRKRS}" ] && [ -z "${OPT_FPSHDIR}" ] && \
                end_die "Please supply a shared dir when specifying workers"

    # Check for paths presence and validity
    if is_abs_path "$1" && is_abs_path "$2"
    then
        :
    else
        usage
        end_die "Please supply an absolute path for both src_dir/ and dst_dir/"
    fi
    OPT_SDIR="$1"
    OPT_DDIR="$2"
}

########## Work-related functions (in-memory, running-jobs handling)

# Initialize WORK_FREEWORKERS by expanding OPT_WRKRS up to OPT_JOBS elements,
# assigning a fixed number of slots to each worker.
# Sanitize OPT_WRKRS if necessary.
work_list_free_workers_init () {
    local _OPT_WRKRS_NUM=$(echo ${OPT_WRKRS} | awk '{print NF}')
    if [ ${_OPT_WRKRS_NUM} -gt 0 ]
    then
        local _i=0
        while [ ${_i} -lt ${OPT_JOBS} ]
        do
            local _OPT_WRKRS_IDX="$((${_i} % ${_OPT_WRKRS_NUM} + 1))"
            WORK_FREEWORKERS="${WORK_FREEWORKERS} $(echo ${OPT_WRKRS} | awk '{print $'${_OPT_WRKRS_IDX}'}')"
            _i=$((${_i} + 1))
        done
    else
        OPT_WRKRS=""
        WORK_FREEWORKERS="local"
    fi
}

# Pick-up next worker
work_list_pick_next_free_worker () {
    echo "${WORK_FREEWORKERS}" | awk '{print $1}'
}

# Remove next worker from list
work_list_trunc_next_free_worker () {
    WORK_FREEWORKERS="$( echo ${WORK_FREEWORKERS} | sed -E 's/^[[:space:]]*[^[:space:]]+[[:space:]]*//')"
}

# Push a work to the list of currently-running ones
work_list_push () {
    if [ -n "$1" ]
    then
        WORK_LIST="${WORK_LIST} $1"
        WORK_NUM="$((${WORK_NUM} + 1))"
    fi
}

# Rebuild the currently-running jobs' list by examining each process' state
work_list_refresh () {
    local _WORK_LIST=""
    local _WORK_NUM=0
    for _JOB in ${WORK_LIST}
    do
        # If the process is still alive, keep it
        if ps "$(echo ${_JOB} | cut -d ':' -f 1)" 1>/dev/null 2>&1
        then
            _WORK_LIST="${_WORK_LIST} ${_JOB}"
            _WORK_NUM="$((${_WORK_NUM} + 1))"
        # If not, put its worker to the free list
        else
            echo_log "<= [QMGR] Job ${_JOB} finished"
            if [ -n "${OPT_WRKRS}" ]
            then
                WORK_FREEWORKERS="${WORK_FREEWORKERS} $(echo ${_JOB} | cut -d ':' -f 2)"
            fi
        fi
    done
    WORK_LIST=${_WORK_LIST}
    WORK_NUM=${_WORK_NUM}
}

########## Jobs-related functions (on-disk, jobs' queue handling)

# Initialize job queue and work directories
job_queue_init () {
    mkdir -p "${JOBS_QUEUEDIR}" 2>/dev/null || \
        end_die "Cannot create job queue directory ${JOBS_QUEUEDIR}"
    mkdir -p "${JOBS_WORKDIR}" 2>/dev/null || \
        end_die "Cannot create job work directory ${JOBS_WORKDIR}"
}

# Set the "done" flag within job queue
job_queue_done () {
    sleep 1 # Ensure this very last file gets created within the next second of
            # last job file's mtime. Necessary for filesystems that don't get
            # below the second for mtime precision (msdosfs).
    touch "${JOBS_QUEUEDIR}/done"
}

# Set the "stop" flag within job queue
job_queue_stop () {
    touch "${JOBS_QUEUEDIR}/stop"
}

# Handle ^C: stop queue processing by setting the "stop" flag
trap_queue () {
    job_queue_stop
    end_die "\nKilled."
}

# Get next job name relative to ${JOBS_WORKDIR}/
# Returns empty string if no job is available
job_queue_next () {
    local _NEXT=""
    if [ -f "${JOBS_QUEUEDIR}/stop" ]
    then
        echo "stop"
    else
        _NEXT=$(cd "${JOBS_QUEUEDIR}" && ls -rt1 | head -n 1)
        if [ -n "${_NEXT}" ]
        then
            mv "${JOBS_QUEUEDIR}/${_NEXT}" "${JOBS_WORKDIR}" || \
                end_die "Cannot dequeue next job"
            echo "${_NEXT}"
        fi
    fi
}

# Main jobs' loop: pick up jobs within the queue directory and start them
job_queue_loop () {
    local _NEXT=""
    while [ "${_NEXT}" != "done" ] && [ "${_NEXT}" != "stop" ]
    do
        local _PID=""
        if [ ${WORK_NUM} -lt ${OPT_JOBS} ]
        then
            _NEXT="$(job_queue_next)"
            if [ -n "${_NEXT}" ] && \
                [ "${_NEXT}" != "done" ] && \
                [ "${_NEXT}" != "stop" ]
            then
                if [ -z "${OPT_WRKRS}" ]
                then
                    echo_log "=> [QMGR] Starting job ${JOBS_WORKDIR}/${_NEXT} (local)"
                    /bin/sh "${JOBS_WORKDIR}/${_NEXT}" &
                    work_list_push "$!:local"
                else
                    local _NEXT_HOST="$(work_list_pick_next_free_worker)"
                    work_list_trunc_next_free_worker
                    echo_log "=> [QMGR] Starting job ${JOBS_WORKDIR}/${_NEXT} -> ${_NEXT_HOST}"
                    "${SSH_BIN}" "${_NEXT_HOST}" '/bin/sh -s' \
                        < "${JOBS_WORKDIR}/${_NEXT}" &
                    work_list_push "$!:${_NEXT_HOST}"
                fi
            fi
        fi
        work_list_refresh
        sleep 0.2
    done

    if [ "${_NEXT}" == "done" ]
    then
        echo_log "=> [QMGR] Done submitting jobs. Waiting for them to finish."
    else
        echo_log "=> [QMGR] Stopped. Waiting for jobs to finish."
    fi
    wait
    echo_log "=> [QMGR] No more job running."
}

########## Program start (main() !)

# Parse command-line options
parse_opts "$@"

## Options' post-processing section

# Generate a unique job name
FPART_JOBNAME="$(echo ${OPT_DDIR} | sha1)-$(date '+%s')-$$"

# Queue manager configuration. This queue remains local, even when using SSH.
JOBS_QUEUEDIR="${OPT_FPDIR}/queue/${FPART_JOBNAME}"   # Queue dir.
JOBS_WORKDIR="${OPT_FPDIR}/work/${FPART_JOBNAME}"     # Current jobs' dir.

# Paths to executables that must exist locally
FPART_BIN="$(which fpart)"
SSH_BIN="$(which ssh)"
MAIL_BIN="$(which mail)"
# Note: This script also uses tee, cut, sed, awk, sha1, date
# which should come with your favourite operating system

# Paths to executables that must exist either locally or remotely (depending
# on if you use SSH or not). When using SSH, the following binaries must be
# present at those paths on each worker.
RSYNC_BIN="$(which rsync)"

# Fpart paths. Those ones must be shared amongst all nodes when using SSH
# (e.g. through a NFS share mounted on *every* single node, including the master
# 'job submitter').
FPART_PARTSDIR="${OPT_FPSHDIR}/parts/${FPART_JOBNAME}"
FPART_PARTSTMPL="${FPART_PARTSDIR}/part-$$"
FPART_LOGDIR="${OPT_FPSHDIR}/log/${FPART_JOBNAME}"
FPART_LOGFILE="${FPART_LOGDIR}/fpart.log"

# Fpart's common options
FPART_OPTIONS="-x '.zfs' -x '.snapshot*'"

# Fpart hooks (black magic is here !)
FPART_COMMAND="/bin/sh -c '${RSYNC_BIN} -av --numeric-ids \
        --files-from=\\\"\${FPART_PARTFILENAME}\\\" \
        \\\"${OPT_SDIR}/\\\" \
        \\\"${OPT_DDIR}/\\\"' \
        1>\"${FPART_LOGDIR}/\${FPART_PARTNUMBER}.stdout\" \
        2>\"${FPART_LOGDIR}/\${FPART_PARTNUMBER}.stderr\""
FPART_POSTHOOK="echo \"${FPART_COMMAND}\" > \
        \"${JOBS_QUEUEDIR}/\${FPART_PARTNUMBER}\" && \
        [ -n \"${OPT_VERBOSE}\" ] && \
        echo \"=> [FPART] Partition \${FPART_PARTNUMBER} written\"" # [1]

# [1] Be careful to host the job queue on a filesystem that can handle
# fine-grained mtime timestamps (i.e. with a sub-second precision) if you want
# the queue to be processed in order when fpart generates several job files per
# second.
# On FreeBSD, vfs timestamps' precision can be tuned using the
# vfs.timestamp_precision sysctl. See vfs_timestamp(9).

## End of options' post-processing section, let's start for real now !

WORK_NUM=0          # Current number of running processes
WORK_LIST=""        # Work PID[:WORKER] list
WORK_FREEWORKERS="" # Free workers' list

# Check for essential binaries
if [ ! -x "${FPART_BIN}" ] || [ ! -x "${SSH_BIN}" ] || [ ! -x "${MAIL_BIN}" ]
then
    end_die "External tools are missing, check your configuration"
fi

# Create fpart directories and log file
mkdir -p "${FPART_PARTSDIR}" 2>/dev/null || \
    end_die "Cannot create partitions' output directory: ${FPART_PARTSDIR}"
mkdir -p "${FPART_LOGDIR}" 2>/dev/null || \
    end_die "Cannot create log directory: ${FPART_LOGDIR}"
touch "${FPART_LOGFILE}" 2>/dev/null || \
    end_die "Cannot create log file: ${FPART_LOGFILE}"

# Validate src_dir/ locally (needed for fpart)
[ ! -d "${OPT_SDIR}" ] && \
    end_die "Source directory does not exist (or is not a directory): ${OPT_SDIR}"

# When using SSH, validate src_dir/ and dst_dir/ remotely and check for rsync
# presence (this also allows checking SSH connectivity to each declared host)
if [ -n "${OPT_WRKRS}" ]
then
    echo_log "======> Validating requirements on SSH nodes..."

    # First, blindly try to create dst_dir/ as well as a witness file on the
    # first node (only). Using a witness file will allow us to check for its
    # presence/visibility from other nodes, avoiding "split-brain" situations
    # where dst_dir/ exists but is not shared amongst all nodes (typically a
    # local mount point where the shared storage area *should* be mounted but
    # isn't, for any reason).
    _first_host="$(echo ${OPT_WRKRS} | awk '{print $1}')"
    "${SSH_BIN}" "${_first_host}" \
        "/bin/sh -c 'mkdir -p \"${OPT_DDIR}\" && \
        touch \"${OPT_DDIR}/${FPART_JOBNAME}\"' 2>/dev/null"

    # Then, check for src_dir/, witness file and rsync presence on each node.
    for _host in ${OPT_WRKRS}
    do
        "${SSH_BIN}" "${_host}" "/bin/sh -c '[ -d \"${OPT_SDIR}\" ]'" || \
            end_die "Source directory does not exist on target ${_host} (or is not a directory): ${OPT_SDIR}"
        "${SSH_BIN}" "${_host}" "/bin/sh -c '[ -f \"${OPT_DDIR}/${FPART_JOBNAME}\" ]'" || \
            end_die "Destination directory (shared) is not available on target ${_host}: ${OPT_DDIR}"
        "${SSH_BIN}" "${_host}" "/bin/sh -c '[ -x \"${RSYNC_BIN}\" ]'" || \
            end_die "Rsync executable not found on target ${_host}"
        echo_log "===> ${_host}: OK"
    done

    # Remove witness file
    "${SSH_BIN}" "${_first_host}" \
        "/bin/sh -c 'rm -f \"${OPT_DDIR}/${FPART_JOBNAME}\"' 2>/dev/null"
    unset _first_host
else
    # Local usage - create dst_dir/ and check for rsync presence
    if [ ! -d "${OPT_DDIR}" ]
    then
        mkdir -p "${OPT_DDIR}" 2>/dev/null || \
            end_die "Cannot create destination directory: ${OPT_DDIR}"
    fi
    [ ! -x "${RSYNC_BIN}" ] && \
        end_die "Rsync executable not found"
fi

# Dispatch OPT_WRKRS into WORK_FREEWORKERS
work_list_free_workers_init

# Initialize jobs queue, set trap and start job_queue_loop
job_queue_init
trap 'trap_queue' 2
job_queue_loop&

# Let's rock !
echo_log "======> [$$] Syncing ${OPT_SDIR} => ${OPT_DDIR}"
echo_log "===> Start time: $(date)"
echo_log "===> Starting fpart..."
echo_log "===> (parts dir: ${FPART_PARTSDIR})"
echo_log "===> (log dir: ${FPART_LOGDIR})"

# Start fpart from src_dir/ directory and produce jobs within ${JOBS_QUEUEDIR}/
cd "${OPT_SDIR}" && \
    "${FPART_BIN}" -f "${OPT_FPMAXPARTFILES}" -s "${OPT_FPMAXPARTSIZE}" \
        -o "${FPART_PARTSTMPL}" ${FPART_OPTIONS} -Z -L \
        -W "${FPART_POSTHOOK}" . 2>&1 | tee -a "${FPART_LOGFILE}"

# Tell job_queue_loop that crawling has finished
job_queue_done

# Wait for job_queue_loop to terminate
echo_log "===> Jobs submitted, waiting..."
wait

# Examine results and send an e-mail if requested
RET=$(find "${FPART_LOGDIR}/" -name "*.stderr" ! -size 0)
MSG=$( ([ -z "${RET}" ] && echo 'Rsync completed without error.') || \
    echo -e "Rsync errors detected, see logs:\n${RET}")
if [ -n "${OPT_MAIL}" ]
then
    echo "${MSG}" | ${MAIL_BIN} -s "Fpart job ${FPART_JOBNAME}" "${OPT_MAIL}"
fi
echo_log "===> Jobs terminated."
echo "${MSG}" | tee -a "${FPART_LOGFILE}"
echo_log "<=== End time: $(date)"

[ -n "${RET}" ] && exit 1
exit 0
